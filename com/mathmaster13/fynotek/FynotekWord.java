package com.mathmaster13.fynotek;

import org.jetbrains.annotations.NotNull;
import java.math.BigInteger;

/**
 A class for handling words in Fynotek, a conlang by mochaspen. All objects created by this class are immutable. Fynotek documentarion can be found <a href="https://aspenlangs.neocities.org/fyndoc.html">here</a>.
 @author mathmaster13
 @since 1.0
 */
public final class FynotekWord extends FynotekParent {
    public final boolean isProper;

    // Constants
    /** The irregular word <i>folo</i>. */
    @NotNull
    public static final FynotekWord FOLO = new FynotekWord("fol", "o", "", Ablaut.O_NOUN, false);

    private static final String[] digitList = {"", "ay", "fo", "us", "nos", "pur"};

    private static final String[] binaryList = {"po", "pura", "poña", "sola", "manta", "tauwa"};

    /** Generated by IntelliJ IDEA Community. */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        if (!super.equals(o)) return false;

        FynotekWord that = (FynotekWord) o;

        return isProper == that.isProper;
    }

    /** Generated by IntelliJ IDEA Community. */
    @Override
    public int hashCode() {
        int result = super.hashCode();
        result = 31 * result + (isProper ? 1 : 0);
        return result;
    }

    /**
     The maximum integer supported by Fynotek's number system. You can compare if a number <code>x</code> is too large or small with <code>(x.abs().compareTo(MAX_MAGNITUDE) &gt; 0)</code>.
     @see #number(BigInteger)
     */
    @NotNull
    public static final BigInteger MAX_MAGNITUDE = new BigInteger(new byte[]{43, 86, -44, -81, -113, 121, 50, 39, -116, 121, 126, -67, 0, -1, -1, -1, -1, -1, -1, -1, -1});

    private static final char[] stopList = {'p', 't', 'k'};



    // Public constructors
    /**
     Converts a String and a boolean into a FynotekWord. The String contains the word itself, while the boolean represents whether the word is a proper noun: <code>true</code> if it is, and <code>false</code> if it is not. Leading and trailing whitespace is ignored (the <code>String.trim()</code> method is called on <code>word</code>).
     @param word word to be converted to a FynotekWord.
     @param isProper whether the word is a proper noun or not.
     */
    public FynotekWord(@NotNull String word, boolean isProper) {
        this(word, Ablaut.NONE, isProper);
    }
    /**
     Converts a String into a FynotekWord. The word is assumed not to be a proper noun. Leading and trailing whitespace is ignored (the <code>String.trim()</code> method is called on <code>word</code>).
     @param word word to be converted to a FynotekWord.
     */
    public FynotekWord(@NotNull String word) {
        this(word, Ablaut.NONE, false);
    }

    // Private constructors
    /** Does not do a folo check; this is the manual constructor */
    private FynotekWord(@NotNull String a, @NotNull String b, @NotNull String c, @NotNull Ablaut ablaut, boolean isProper) {
        super(a, b, c, ablaut);
        this.isProper = isProper;
    }
    private FynotekWord(@NotNull String word, @NotNull Ablaut ablaut, boolean isProper) {
        super(word, (word.equals("folo") && !isProper) ? Ablaut.O_NOUN : ablaut);
        this.isProper = isProper;
    }
    private FynotekWord(@NotNull FynotekParent word) {
        this(word, false);
    }
    private FynotekWord(@NotNull FynotekParent word, boolean isProper) {
        super(word.beginning, word.vowels, word.end, (word.toString().equals("folo") && !isProper) ? Ablaut.O_NOUN : Ablaut.NONE);
        this.isProper = isProper;
    }


    // Internal-use methods
    @Override
    protected @NotNull FynotekWord ablaut(@NotNull Ablaut vowel) {
        if (this.toString().equals("folo") && vowel == Ablaut.O_NOUN) return this;
        if (vowel == Ablaut.NONE) return this;
        if (vowels.isEmpty()) return new FynotekWord(beginning, vowels, end, ablaut, isProper);
        String newVowels = vowels;
        if (vowel == Ablaut.REDUPLICATION) {
            if (newVowels.length() == 1 || newVowels.charAt(0) != newVowels.charAt(1) ) {
                newVowels += newVowels.substring(newVowels.length() - 1);
                if (newVowels.length() > 2) {
                    newVowels = newVowels.substring(newVowels.length() - 2);
                }
            } else {
                newVowels = newVowels.substring(0, 1);
            }
        } else {
            if (vowels.charAt(vowels.length() - 1) != vowel.asChar) {
                newVowels = (vowels.length() == 1 ? Character.toString(vowel.asChar) : (Character.toString(vowels.charAt(0)) + vowel.asChar));
            } else {
                newVowels += vowel.ablautPair;
                if (newVowels.length() > 2) {
                    newVowels = newVowels.substring(newVowels.length()-2);
                }
            }
        }
        return new FynotekWord(beginning, newVowels, end, vowel, isProper);
    }

    private @NotNull FynotekWord properSuffix(@NotNull Ablaut vowel) {
        if (vowel == Ablaut.NONE) return this;
        if (vowel == Ablaut.REDUPLICATION) {
            int vowelLength = vowels.length();
            if (vowelLength == 0) return this;
            String vowelToReduplicate = (vowelLength == 1 ? vowels : Character.toString(vowels.charAt(vowelLength - 1)));
            return this.suffix(vowelToReduplicate + vowelToReduplicate);
        } else {
            String suffix = Character.toString(vowel.asChar);
            if (end.length() == 0 && vowels.length() >= 2) suffix = "n" + suffix;
            return new FynotekWord(this.toString() + suffix, vowel, isProper);
        }
    }

    private static boolean isStop(char letter) {
        for (int i = 0; i < 3; i++) if (letter == stopList[i]) return true;
        return false;
    }

    private static @NotNull String number(@NotNull String seximalString, boolean isNegative) {
        if (seximalString.equals("0")) return "fui";
        final StringBuilder output = new StringBuilder((isNegative ? "ñy " : ""));
        for (int i = 0; i < seximalString.length(); i++) {
            int seximalDigit = seximalString.charAt(i) - 48;
            if (seximalDigit == 0) continue;
            output.append(digitList[seximalDigit]).append(binarySuffix(seximalString.length() - i - 1)).append(" ");
        }
        return output.toString().trim();
    }
    private static @NotNull String binarySuffix(int num) {
        final StringBuilder output = new StringBuilder();
        for (byte i = 0; i <= 5; i++) {
            if (((num >> i) & 1) == 1) output.append(binaryList[i]);
        }
        return output.toString();
    }

    // Note: This method will be re-implemented soon to use code from isValidSequence.
    private static boolean isValidConsonantSequence(String sequence) {
        sequence = sequence.toLowerCase().trim();
        // Checks for consonant-related phonotactic problems
        int i = 0;
        while (i < sequence.length()) {
            char testChar = sequence.charAt(i);
            // Consonant check
            int j;
            for (j = i; j < sequence.length(); j++)
                if (isVowel(sequence.charAt(j)))
                    break;
            if (j - i + ((i == 0 || j == sequence.length()) ? 1 : 0) > 3) return false;
            if (j - i == 0) j++;

            // Stop+Stop check
            boolean stopCheck = isStop(testChar);
            for (int l = i + 1; l < j; l++) {
                boolean currentCharIsStop = isStop(sequence.charAt(l));
                if (stopCheck && currentCharIsStop) return false;
                stopCheck = currentCharIsStop;
            }
            i = j;
        }
        return true;
    }


    // Public methods
    /**
     Returns this FynotekWord inflected for the noun case specified by <code>caseOfNoun</code>. Note that the word "folo" as a common noun cannot be marked for the nominative case, and doing so throws an <code>IllegalArgumentException</code>.
     @param caseOfNoun the noun case to inflect this FynotekWord for.
     @return this FynotekWord inflected for the specified noun case.
     @see #match(FynotekParent)
     */
    public @NotNull FynotekWord nounCase(@NotNull Case caseOfNoun) throws IllegalArgumentException {
        if (caseOfNoun == Case.NOMINATIVE) {
            if (this.toString().equals("folo") && !isProper) throw new IllegalArgumentException("\"folo\" cannot be marked for the nominative case");
            return this;
        }
        // While there is an actual suffix function, I prefer to leave this simplified ome in for speed.
        return (isProper ? this.properSuffix(caseOfNoun.ablaut) : this.ablaut(caseOfNoun.ablaut));
    }

    /**
     Returns this FynotekWord inflected for the verb tense (if this word is not a proper noun) or verb modifier form (if this word is a proper noun or the word <i>folo</i>) specified by <code>tenseOfVerb</code>.
     @param tenseOfVerb the verb tense to inflect this FynotekWord for.
     @return this FynotekWord inflected for the specified verb tense.
     @see #match(FynotekParent)
     @see FynotekParent#verbTense(Tense)
     */
    @Override
    public @NotNull FynotekWord verbTense(@NotNull Tense tenseOfVerb) {
        if (!isProper) return new FynotekWord(super.verbTense(tenseOfVerb));
        return properSuffix(tenseOfVerb.ablaut); // Verb modifier forms for proper nouns
    }

    /**
     Returns a FynotekWord with the specified suffix appended to the end of this word. If the suffix creates a phonotactically invalid sequence, <i>n</i> or <i>a</i> will be infixed as needed to make the resulting word phonotactically valid.  Leading and trailing whitespace is ignored (the <code>String.trim()</code> method is called on <code>suffix</code>).
     @param suffix the suffix to be appended to the end of this FynotekWord.
     @return a FynotekWord with the specified suffix appended to the end of it.
     @see #prefix(String)
     */
    public @NotNull FynotekWord suffix(@NotNull String suffix) {
        if (suffix.isEmpty()) return this;
        String output = this.toString();
        if (end.isEmpty()) {
            // Check for VVV sequence
            if (isVowel(suffix.charAt(0)) && ((vowels.length() >= 2) || (suffix.length() >= 2 && (isVowel(suffix.charAt(1)))))) {
                output += ("n" + suffix);
            } else {
                output += suffix;
            }
        } else {
            // This is so complex that delegating it to (a subset of) the isValidSequence() function may be needed.
            if (!isValidConsonantSequence(vowels + end + suffix)) {
                output += ("a" + suffix);
            } else {
                output += suffix;
            }
        }
        return new FynotekWord(output, ablaut, isProper);
    }

    // The prefix function just calls the suffix function on the reverse of the input, then reverses it back.
    /**
     Returns a FynotekWord with the specified prefix appended to the beginning of this word. If the prefix creates a phonotactically invalid sequence, <i>n</i> or <i>a</i> will be infixed as needed to make the resulting word phonotactically valid.  Leading and trailing whitespace is ignored (the <code>String.trim()</code> method is called in the <code>suffix</code> method).
     @param prefix the prefix to be appended to the beginning of this FynotekWord.
     @return a FynotekWord with the specified prefix appended to the beginning of it.
     @see #suffix(String)
     */
    public @NotNull FynotekWord prefix(@NotNull String prefix) {
        if (prefix.isEmpty()) return this;
        StringBuilder temp = new StringBuilder(this.toString());
        FynotekWord reverseWord = new FynotekWord(temp.reverse().toString());
        temp = new StringBuilder(prefix);
        temp = new StringBuilder(reverseWord.suffix(temp.reverse().toString()).toString());
        return new FynotekWord(temp.reverse().toString(), ablaut, isProper);
    }

    /**
     Returns this FynotekWord inflected for the same case or tense as <code>word</code>.
     @param word the FynotekWord or OldFynotekWord to match this word's inflection with.
     @return this FynotekWord inflected for the same case or tense as <code>word</code>.
     @see #nounCase(Case)
     @see #verbTense(Tense)
     */
    @Override
    public @NotNull FynotekWord match(@NotNull FynotekParent word) {
        Ablaut ablaut = word.ablaut;
        if (word instanceof FynotekWord) return (isProper ? properSuffix(ablaut) : ablaut(ablaut));
        return new FynotekWord(super.match(word));
    }

    @Override
    public @NotNull FynotekWord personSuffix(@NotNull Person person) {
        if (person == Person.P1) return this;
        return this.suffix(person.suffix);
    }


    // Static methods
    /**
     Returns the Fynotek translation of the specified number. If the number's absolute value is greater than <code>MAX_MAGNITUDE</code>, an empty String is returned.
     @param num the number to be translated.
     @return the Fynotek translation of the specified number.
     @throws IllegalArgumentException If the number provided is too large for the number system to handle.
     @see #MAX_MAGNITUDE
     */
    public static @NotNull String number(@NotNull BigInteger num) {
        if (num.abs().compareTo(MAX_MAGNITUDE) > 0) throw new IllegalArgumentException("Number is too large");
        return number(num.toString(6), (num.signum() == -1));
    }

    /**
     Returns the Fynotek translation of the specified number.
     @param num the number to be translated.
     @return the Fynotek translation of the specified number.
     */
    public static @NotNull String number(long num) {
        return number(Long.toString(Math.abs(num), 6), (Math.signum(num) == -1));
    }


    /**
     Returns whether the given sequence is phonotactically and orthographically valid in Fynotek. Capitalization is ignored (for example, <code>"A"</code> and <code>"a"</code> are treated the same way). Multiple words can be separated by whitespace, and this function will only return <code>true</code> if all words in <code>sequence</code> are valid.  Leading and trailing whitespace is ignored (the <code>String.trim()</code> method is called on <code>sequence</code>). A sequence containing punctuation marks, numbers, or other non-letter characters returns <code>false</code>, as well as an empty sequence or one containing only whitespace.
     @param sequence the sequence to be checked for validity.
     @return <code>true</code> if <code>sequence</code> is a valid sequence, and <code>false</code> if otherwise.
     */
    public static boolean isValidSequence(@NotNull String sequence) {
        return FynotekParent.isValidSequence(sequence, "[aeiouyptkmnñrfshjwl\\s]", (byte) 3, false);
    }


    /**
     * Represents the case of a Fynotek noun.
     * @see #nounCase(Case)
     */
    public enum Case {
        NOMINATIVE(Ablaut.NONE), ACCUSATIVE(Ablaut.O_NOUN), GENITIVE(Ablaut.I), DATIVE(Ablaut.A);

        private final Ablaut ablaut;

        Case(Ablaut ablaut) {
            this.ablaut = ablaut;
        }
    }
}
